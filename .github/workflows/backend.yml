name: Backend CI

on:
  push:
    branches:
      - main
      - production
    paths:
      - 'backend/**'
  pull_request:
    branches:
      - main
      - production
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from Github repository
        uses: actions/checkout@v4.2.2

      - name: Prepare environment (Python)
        uses: actions/setup-python@v5.3.0
        with:
          python-version: 3.12

      - name: Cache dependencies (venv)
        uses: actions/cache@v4.2.0
        with:
          path: backend/venv
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      - name: Install dependencies # conditional install depending on if the venv folder was retrieved from cache or must be newly created
        run: |
          cd backend
          if [ ! -d "venv" ]; then
            python -m venv venv
          fi
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Build application # really just uploads requirements and main.py files
        run: |
          cd backend
          mkdir dist
          cp main.py requirements.txt dist

      - name: Upload build folder
        uses: actions/upload-artifact@v4.4.3
        with:
          name: backend-build
          path: backend/dist
          
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from GitHub repository
        uses: actions/checkout@v4.2.2

      - name: Prepare environment
        uses: actions/setup-python@v5.3.0
        with:
          python-version: 3.12

      - name: Cache dependencies (venv)
        uses: actions/cache@v4.2.0
        with:
          path: backend/venv
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      - name: Install dependencies # conditional install depending on if the venv folder was retrieved from cache or must be newly created
        run: |
          cd backend
          if [ ! -d "venv" ]; then
            python -m venv venv
          fi
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Run tests
        run: |
          cd backend
          source venv/bin/activate
          pytest --cov --cov-report=html:coverage_report --cov-report=xml:coverage.xml
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Upload XML coverage report
        uses: actions/upload-artifact@v4.4.3
        with:
          name: backend-coverage-xml
          path: backend/coverage.xml

      - name: Upload human-readable coverage report
        uses: actions/upload-artifact@v4.4.3
        with:
          name: backend-coverage
          path: backend/coverage_report
  
  sonarqube-scan:
    needs: test
    runs-on: ubuntu-latest
    environment: Development
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code from GitHub repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage-xml
          path: backend/coverage.xml

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          projectBaseDir: backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  dockerize-dev:
    needs: sonarqube-scan
    runs-on: ubuntu-latest
    environment: Development
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code from GitHub repository
        uses: actions/checkout@v4.2.2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/rirs-backend:dev backend

      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/rirs-backend:dev

  dockerize-prod:
    needs: test
    runs-on: ubuntu-latest
    environment: Production
    if: github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code from GitHub repository
        uses: actions/checkout@v4.2.2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/rirs-backend:prod backend

      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/rirs-backend:prod
  
  deploy-to-ec2:
    needs: dockerize-prod
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'

    steps:
      - name: Trigger redeploy webhook on EC2 instance
        run: curl http://${{ secrets.EC2_PUBLIC_IP }}:9000/hooks/redeploy-backend
